geom_sf(data=world_roceeh, color = "darkgray", fill = "gray")+
geom_sf(data=points, aes(size=n, color=n), fill=NA, alpha=.5)+
#coord_sf(crs = "+init=epsg:4326", xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = "+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs")+
#coord_sf(crs = "+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs")+
#coord_sf(crs = "+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs",xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = "+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs",xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = "+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs", expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000))+
theme(panel.grid.major = element_line(color = 'lightgray', linetype = "solid", size = 0.5),
panel.grid.minor = element_line(color = 'lightgray', linetype = "solid", size = 0.5),
panel.background = element_rect(color = 'gray', color='black'))
ggplot()+
geom_sf(data=world, color = "lightgrey", fill = "lightgray")+
geom_sf(data=world_roceeh, color = "darkgray", fill = "gray")+
geom_sf(data=points, aes(size=n, color=n), fill=NA, alpha=.5)+
#coord_sf(crs = "+init=epsg:4326", xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = "+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs")+
#coord_sf(crs = "+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs")+
#coord_sf(crs = "+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs",xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = "+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs",xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = "+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs", expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000))+
theme(panel.grid.major = element_line(color = 'lightgray', linetype = "solid", size = 0.5),
panel.grid.minor = element_line(color = 'lightgray', linetype = "solid", size = 0.5),
panel.background = element_rect(color = 'gray', fill='black'))
ggplot()+
geom_sf(data=world, color = "lightgrey", fill = "lightgray")+
geom_sf(data=world_roceeh, color = "darkgray", fill = "gray")+
geom_sf(data=points, aes(size=n, color=n), fill=NA, alpha=.5)+
#coord_sf(crs = "+init=epsg:4326", xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = "+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs")+
#coord_sf(crs = "+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs")+
#coord_sf(crs = "+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs",xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = "+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs",xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = "+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs", expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000))+
theme(panel.grid.major = element_line(color = 'lightgray', linetype = "solid", size = 0.5),
panel.grid.minor = element_line(color = 'lightgray', linetype = "solid", size = 0.5),
panel.background = element_rect(color = 'gray', fill='lightblue'))
library(tidyverse)
library(readr)
library(sf)
library(ggspatial)
# Import data
table <- read_delim('fig_coverage/road_coverage.csv',
delim = ';', escape_double = FALSE, trim_ws = TRUE)
table[is.na(table$locality.x)|is.na(table$locality.y),] # Show localities without coordinates
table[is.na(table$locality.idlocality),] # Show localities without locality name
table <- table %>% drop_na(c(locality.x, locality.y))
theme_pub <-  function(){
list(theme_bw(),
theme(text=element_text(size=8), #change font size of all text
axis.text=element_text(size=8), #change font size of axis text
axis.title=element_text(size=8), #change font size of axis titles
plot.title=element_text(size=8), #change font size of plot title
legend.text=element_text(size=8), #change font size of legend text
legend.title=element_text(size=8),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2)))
}
# World map ----
## Aggregate assemblages per locality
table2 <- table %>% count(locality.idlocality, locality.x, locality.y, sort=T)
table2[duplicated(table2$locality.idlocality),] # Show localities with duplicates, double coordinates etc.
## Make geodata
points <- st_as_sf(x = table2,
coords = c('locality.x', 'locality.y'),
#crs = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',
crs = st_crs(4326))
## Mapping
### Download background maps
world <- rnaturalearth::ne_countries(scale = 110, returnclass = 'sf') %>% st_transform(crs=st_crs(4326)) %>% st_make_valid()
world_roceeh <- rnaturalearth::ne_countries(scale = 110, type = 'countries', continent = c('europe', 'africa', 'asia'), geounit = F,returnclass = 'sf') %>% st_transform(crs=st_crs(4326)) %>% st_make_valid()
### define a long & slim polygon that overlaps the meridian line & set its CRS to match that of world
offset <- 180-60
polygon <- st_polygon(x = list(rbind(
c(-0.0001 - offset, 90),
c(0 - offset, 90),
c(0 - offset, -90),
c(-0.0001 - offset, -90),
c(-0.0001 - offset, 90)
))) %>%
st_sfc() %>%
st_set_crs(4326)
### Remove slim polygon
world <- world %>% st_difference(polygon)
world_roceeh <- world_roceeh %>% st_difference(polygon)
### Remove slim polygon
world <- world %>% st_difference(polygon)
plt1<- ggplot()+
geom_sf(data=world, color = 'white', fill = '#FFD28A', size=0.2)+
#geom_sf(data=world_roceeh, color = 'darkgray', fill = 'gray')+
geom_sf(data=points, aes(size=n), fill='#A70D1F', color='grey10', shape=21)+
#coord_sf(crs = '+init=epsg:4326', xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = '+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs',xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs',xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs', expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(name='Number of assemblages\nper locality', breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000), range = c(.1, 18))+
#scale_fill_continuous(name='Number of assemblages', low='#A70D1F', high='#A70D1F50', limits = c(0,1000))+
#scale_color_continuous(name='Number of assemblages', low='#FFFFFF10', high='#FFFFFF99', limits = c(0,1000))+
annotation_scale(location = 'bl', width_hint = 0.2) +
theme_pub()+
theme(panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2),
panel.background = element_rect(color = 'black', fill='#5D9CA5'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
legend.position='bottom')
plt1
unique(table$country_continent.continent)
table3 <- table %>%
ggplot()+
geom_bar(data=table, aes(x=locality.idlocality))
ggplot()+
geom_bar(data=table, aes(x=locality.idlocality))
table3 <- table %>% count(country_continent.continent, sort=F)
View(table3)
View(table2)
View(table)
View(table)
library(tidyverse)
library(readr)
library(sf)
library(ggspatial)
# Import data
table <- read_delim('fig_coverage/road_coverage.csv',
delim = ';', escape_double = FALSE, trim_ws = TRUE)
table[is.na(table$locality.x)|is.na(table$locality.y),] # Show localities without coordinates
table[is.na(table$locality.idlocality),] # Show localities without locality name
table <- table %>% drop_na(c(locality.x, locality.y))
theme_pub <-  function(){
list(theme_bw(),
theme(text=element_text(size=8), #change font size of all text
axis.text=element_text(size=8), #change font size of axis text
axis.title=element_text(size=8), #change font size of axis titles
plot.title=element_text(size=8), #change font size of plot title
legend.text=element_text(size=8), #change font size of legend text
legend.title=element_text(size=8),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2)))
}
# World map ----
## Aggregate assemblages per locality
table2 <- table %>% count(locality.idlocality, locality.x, locality.y, sort=T)
table2[duplicated(table2$locality.idlocality),] # Show localities with duplicates, double coordinates etc.
## Make geodata
points <- st_as_sf(x = table2,
coords = c('locality.x', 'locality.y'),
#crs = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',
crs = st_crs(4326))
## Mapping
### Download background maps
world <- rnaturalearth::ne_countries(scale = 110, returnclass = 'sf') %>% st_transform(crs=st_crs(4326)) %>% st_make_valid()
### define a long & slim polygon that overlaps the meridian line & set its CRS to match that of world
offset <- 180-60
polygon <- st_polygon(x = list(rbind(
c(-0.0001 - offset, 90),
c(0 - offset, 90),
c(0 - offset, -90),
c(-0.0001 - offset, -90),
c(-0.0001 - offset, 90)
))) %>%
st_sfc() %>%
st_set_crs(4326)
### Remove slim polygon
world <- world %>% st_difference(polygon)
plt1<- ggplot()+
geom_sf(data=world, color = 'white', fill = '#FFD28A', size=0.2)+
geom_sf(data=points, aes(size=n), fill='#A70D1F', color='grey10', shape=21)+
#coord_sf(crs = '+init=epsg:4326', xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = '+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs',xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs',xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs', expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(name='Number of assemblages\nper locality', breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000), range = c(.1, 18))+
#scale_fill_continuous(name='Number of assemblages', low='#A70D1F', high='#A70D1F50', limits = c(0,1000))+
#scale_color_continuous(name='Number of assemblages', low='#FFFFFF10', high='#FFFFFF99', limits = c(0,1000))+
annotation_scale(location = 'bl', width_hint = 0.2) +
theme_pub()+
theme(panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2),
panel.background = element_rect(color = 'black', fill='#5D9CA5'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
legend.position='bottom')
plt1
View(table)
library(tidyverse)
library(readr)
library(sf)
library(ggspatial)
# Import data
table <- read_delim('fig_coverage/road_coverage.csv',
delim = ';', escape_double = FALSE, trim_ws = TRUE)
table[is.na(table$locality.x)|is.na(table$locality.y),] # Show localities without coordinates
table[is.na(table$locality.idlocality),] # Show localities without locality name
table <- table %>% drop_na(c(locality.x, locality.y))
theme_pub <-  function(){
list(theme_bw(),
theme(text=element_text(size=8), #change font size of all text
axis.text=element_text(size=8), #change font size of axis text
axis.title=element_text(size=8), #change font size of axis titles
plot.title=element_text(size=8), #change font size of plot title
legend.text=element_text(size=8), #change font size of legend text
legend.title=element_text(size=8),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2)))
}
# World map ----
## Aggregate assemblages per locality
table2 <- table %>% count(locality.idlocality, locality.x, locality.y, sort=T)
table2[duplicated(table2$locality.idlocality),] # Show localities with duplicates, double coordinates etc.
## Make geodata
points <- st_as_sf(x = table2,
coords = c('locality.x', 'locality.y'),
#crs = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',
crs = st_crs(4326))
## Mapping
### Download background maps
world <- rnaturalearth::ne_countries(scale = 110, returnclass = 'sf') %>% st_transform(crs=st_crs(4326)) %>% st_make_valid()
### define a long & slim polygon that overlaps the meridian line & set its CRS to match that of world
offset <- 180-60
polygon <- st_polygon(x = list(rbind(
c(-0.0001 - offset, 90),
c(0 - offset, 90),
c(0 - offset, -90),
c(-0.0001 - offset, -90),
c(-0.0001 - offset, 90)
))) %>%
st_sfc() %>%
st_set_crs(4326)
### Remove slim polygon
world <- world %>% st_difference(polygon)
plt1<- ggplot()+
geom_sf(data=world, color = 'white', fill = '#FFD28A', size=0.2)+
geom_sf(data=points, aes(size=n), fill='#A70D1F', color='grey10', shape=21)+
#coord_sf(crs = '+init=epsg:4326', xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = '+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs',xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs',xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs', expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(name='Number of assemblages\nper locality', breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000), range = c(.1, 18))+
#scale_fill_continuous(name='Number of assemblages', low='#A70D1F', high='#A70D1F50', limits = c(0,1000))+
#scale_color_continuous(name='Number of assemblages', low='#FFFFFF10', high='#FFFFFF99', limits = c(0,1000))+
annotation_scale(location = 'bl', width_hint = 0.2) +
theme_pub()+
theme(panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2),
panel.background = element_rect(color = 'black', fill='#5D9CA5'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
legend.position='bottom')
plt1
# Import data
table <- read_delim('fig_coverage/road_coverage.csv',
delim = ';', escape_double = FALSE, trim_ws = TRUE)
table[is.na(table$locality.x)|is.na(table$locality.y),] # Show localities without coordinates
table[is.na(table$locality.idlocality),] # Show localities without locality name
table <- table %>% drop_na(c(locality.x, locality.y))
theme_pub <-  function(){
list(theme_bw(),
theme(text=element_text(size=8), #change font size of all text
axis.text=element_text(size=8), #change font size of axis text
axis.title=element_text(size=8), #change font size of axis titles
plot.title=element_text(size=8), #change font size of plot title
legend.text=element_text(size=8), #change font size of legend text
legend.title=element_text(size=8),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2)))
}
# World map ----
## Aggregate assemblages per locality
table2 <- table %>% count(locality.idlocality, locality.x, locality.y, sort=T)
table2[duplicated(table2$locality.idlocality),] # Show localities with duplicates, double coordinates etc.
## Make geodata
points <- st_as_sf(x = table2,
coords = c('locality.x', 'locality.y'),
#crs = '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0',
crs = st_crs(4326))
## Mapping
### Download background maps
world <- rnaturalearth::ne_countries(scale = 110, returnclass = 'sf') %>% st_transform(crs=st_crs(4326)) %>% st_make_valid()
### define a long & slim polygon that overlaps the meridian line & set its CRS to match that of world
offset <- 180-60
polygon <- st_polygon(x = list(rbind(
c(-0.0001 - offset, 90),
c(0 - offset, 90),
c(0 - offset, -90),
c(-0.0001 - offset, -90),
c(-0.0001 - offset, 90)
))) %>%
st_sfc() %>%
st_set_crs(4326)
### Remove slim polygon
world <- world %>% st_difference(polygon)
plt1<- ggplot()+
geom_sf(data=world, color = 'white', fill = '#FFD28A', size=0.2)+
geom_sf(data=points, aes(size=n), fill='#A70D1F', color='grey10', shape=21)+
#coord_sf(crs = '+init=epsg:4326', xlim=c(-20, 180), ylim = c(-90, +90), expand=F)+
#coord_sf(crs = '+proj=moll +lon_0=60 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=wink2 +lon_0=60 +lat_1=50.4597762521898 +x_0=0 +y_0=0 +R=6371000 +units=m +no_defs')+
#coord_sf(crs = '+proj=eck4 +lon_0=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs',xlim=c(-2400000, 180), expand=F)+
coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs',xlim=c(-7500000,8600000), ylim=c(-4500000,8000000), expand=T)+
#coord_sf(crs = '+proj=natearth2 +lon_0=60 +x_0=0 +y_0=0 +R=6371008.7714 +units=m +no_defs +type=crs', expand=F)+
scale_x_continuous(breaks = seq(-180, 180, by = 30))+
scale_y_continuous(breaks = seq(-90, 90, by = 30))+
scale_size_continuous(name='Number of assemblages\nper locality', breaks=c(1,10,100,1000), labels=c(1,10,100,1000), limits = c(0,1000), range = c(.1, 18))+
#scale_fill_continuous(name='Number of assemblages', low='#A70D1F', high='#A70D1F50', limits = c(0,1000))+
#scale_color_continuous(name='Number of assemblages', low='#FFFFFF10', high='#FFFFFF99', limits = c(0,1000))+
annotation_scale(location = 'bl', width_hint = 0.2) +
theme_pub()+
theme(panel.grid.major = element_line(color = '#DDDDDD', linetype = 'solid', size = 0.2),
panel.background = element_rect(color = 'black', fill='#5D9CA5'),
panel.border = element_rect(colour = "black", fill=NA, size=1),
legend.position='bottom')
plt1
ggsave('fig_coverage/fig_coverage_A.png', width=180, height=180, units='mm', dpi=300)
# Time chart
table <- table %>% mutate(age_mean=(query_age_max+query_age_min)/2, age_range=(query_age_max-query_age_min))
table3 <- table %>% count(country_continent.continent, sort=F)
ggplot()+
geom_bar(data=table, aes(x=locality.idlocality))
ggplot()+
geom_bar(data=table, aes(x=country_continent_continent))
ggplot()+
geom_bar(data=table, aes(x=country_continent.continent))
View(table3)
table3 <- table %>% count(country_continent.continent, assemblage.name, sort=F)
View(table3)
table3 <- table %>% count(country_continent.continent, locality.idlocality, sort=F)
View(points)
View(table3)
table3 <- table %>% group_by(country_continent.continent)
View(table3)
table3 <- table %>% group_by(country_continent.continent) %>% summarize(distinct_assemblages = n_distinct(assemblage.name))
View(table3)
table3 <- table %>% group_by(country_continent.continent) %>% summarize(no_assemblages = n_distinct(assemblage.name), no_localities = n_distinct(locality.idlocality))
View(table3)
table3 <- table %>% group_by(country_continent.continent) %>% summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality))
table3 <- table %>% group_by(country_continent.continent) %>% summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality))
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=country_continent.continent, names_to = variable, values_to = value)
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=country_continent.continent, names_to = 'variable', values_to = 'value')
View(table3)
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value')
View(table3)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value))
View(table3)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, color=variable))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, color=variable))
source("C:/data/git/road_paper/fig_coverage.R", echo=TRUE)
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
arrange(no_assemblages)
View(table3)
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
arrange(no_assemblages) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value')
View(table3)
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
arrange(no_assemblages) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value')
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, color=variable))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable, position=position_dodge()))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable, position=position_dodge()))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable,position=position_dodge()))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable),position=position_dodge())
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable),position=position_dodge())+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge())+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable),position=position_dodge())+
theme_pub()
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value') %>%
mutate(variable = factor(variable, levels = c('Europe', 'Africa', 'Asia')))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable),position=position_dodge())+
theme_pub()
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value') %>%
mutate(variable = factor(variable, levels = c('Europe', 'Africa', 'Asia')))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable),position=position_dodge())
View(table3)
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value')
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value') %>%
mutate(country_continent.continent = factor(country_continent.continent, levels = c('Europe', 'Africa', 'Asia')))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(x=country_continent.continent, y=value, fill=variable),position=position_dodge())
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge())
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge(reverse=T))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))
table3 <- table %>%
group_by(country_continent.continent) %>%
summarize(no_assemblages = n_distinct(assemblage.name, locality.idlocality), no_localities = n_distinct(locality.idlocality)) %>%
pivot_longer(cols=-country_continent.continent, names_to = 'variable', values_to = 'value') %>%
mutate(country_continent.continent = factor(country_continent.continent, levels = c('Asia', 'Africa', 'Europe')))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
scale_fill_manual()+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
scale_fill_manual(values=c('no_assemblages', 'no_localities'))+
theme_pub()
View(table3)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(aes(label = value), vjust = -0.2)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(aes(label = values), vjust = -0.2)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(aes(label = value), vjust = -0.2)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
#geom_text(aes(label = value), vjust = -0.2)
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(data=table3, aes(label = value), vjust = -0.2)
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(data=table3, aes(label = value), vjust = -0.2)+
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggplot()+
geom_col(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(data=table3, aes(label = value), vjust = -0.2)+
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(data=table3, aes(label = value), vjust = -0.2)+
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
geom_text(data=table3, aes(label = value), vjust = -0.2, position = position_dodge(.9))+
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggplot()+
geom_bar(data=table3, stat = 'identity', aes(y=country_continent.continent, x=value, fill=variable),position=position_dodge2(reverse=T))+
scale_fill_manual(values=c('#F07241', '#383846'), )+
theme_pub()
ggsave('fig_coverage/fig_coverage_B.png', width=180, height=180, units='mm', dpi=300)
